buildscript {
	repositories {
		mavenCentral()
		mavenLocal()
	}
	dependencies {
		// Needed for test schema creation
		classpath 'net.yadaframework:yadatools:0.7.2'
		// classpath 'kr.motd.gradle:sphinx-gradle-plugin:2.2.0'
	}                    
}

plugins {
	id 'java-library'
	id 'maven-publish'
	id 'signing'
}

group = 'net.yadaframework'
version = '0.7.0'

task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allJava
}

javadoc {
    options.encoding = 'UTF-8'
    options.docEncoding = 'UTF-8'
    options.charSet = 'UTF-8'
    failOnError = false
}

// http://stackoverflow.com/a/27853822/587641
task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}   

tasks.withType(GenerateModuleMetadata).configureEach {
    // The value 'enforced-platform' is provided in the validation
    // error message you got
    suppressedValidationErrors.add("bad use of '>'")
    suppressedValidationErrors.add("@param name not found")
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'yadaweb'
            from components.java
            artifact sourcesJar
            artifact javadocJar
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionOf('runtimeClasspath')
                }
            }
  			pom {
			    name = 'YadaWeb'
			    description = 'Yada Framework for web applications'
			    url = 'https://yadaframework.net/en/index.html'
			    inceptionYear = '2014'
			    packaging = 'jar'
			    licenses {
			        license {
			            name = 'MIT License'
			            url = 'https://en.wikipedia.org/wiki/MIT_License'
			        }
			    }
			    developers {
			        developer {
			            id = 'xtianus'
			            name = 'Studio Ghezzi'
			            email = 'studio@ghezzi.net'
			        }
			    }
			    organization {
			    	name = 'Studio Ghezzi'
			    	url = 'https://studio.ghezzi.net/'
			    }
			    scm {
			        connection = 'scm:git:git@github.com:xtianus/yadaframework.git'
			        developerConnection = 'scm:git:git@github.com:xtianus/yadaframework.git'
			        url = 'https://github.com/xtianus/yadaframework'
			    }
			}
        }
    }
    repositories {
        maven {
            // url = "file://${buildDir}/repotest"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
			url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
			credentials(PasswordCredentials) {
				username = ossrhUsername
				password = ossrhPassword
			}
            // url = "file://${buildDir}/repotest"
        }
    }    
}

signing {
    sign publishing.publications.mavenJava
}

apply plugin: 'eclipse-wtp'
// apply plugin: 'kr.motd.sphinx'

eclipse {
	jdt {
		sourceCompatibility = 1.8
		targetCompatibility = 1.8
		// https://stackoverflow.com/a/35302104/587641
		file {
      		File dir = file('.settings')
      		dir.mkdirs()
      		File f = file('.settings/org.eclipse.core.resources.prefs')
      		if (!f.exists()) {
      			f.write('eclipse.preferences.version=1\n')
      			f.append('encoding/<project>=utf-8')
      		}
    	}
	}
	classpath {
        downloadJavadoc = true
        downloadSources = true
    }
}

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

repositories {
    mavenCentral()
	mavenLocal()
}

dependencies {
	api 'org.apache.commons:commons-configuration2:2.+'
	
    implementation 'org.apache.tomcat.embed:tomcat-embed-core:8.5.100'
	// For embedded Tomcat ONLY - add these to your project
    // runtimeOnly 'org.apache.tomcat:tomcat-el-api:8.5.+'
    // runtimeOnly 'org.apache.tomcat:tomcat-jasper-el:8.5.+'
    // runtimeOnly 'org.apache.tomcat:tomcat-jasper:8.5.+'
	
	// Needed by Commons Configuration
    runtimeOnly 'commons-jxpath:commons-jxpath:1.4.0'
	
    implementation 'org.springframework:spring-webmvc:5.3.18',
		'org.springframework:spring-context-support:5.3.18',
		// 'org.springframework:spring-tx:5.2.+',
		// 'org.springframework:spring-jdbc:5.2.+',
		'org.springframework:spring-orm:5.3.18',
		'org.springframework.social:spring-social-facebook:2.0.3.RELEASE',
        'org.hibernate:hibernate-entitymanager:5.5.0.Final',
		'org.hibernate:hibernate-validator:5.4.2.Final',
		'org.thymeleaf:thymeleaf-spring5:3.0.15.RELEASE',
		'mysql:mysql-connector-java:8.0.33',
		'commons-collections:commons-collections:3.2.2',
		'org.apache.tomcat:tomcat-servlet-api:8.5.100',
		'commons-fileupload:commons-fileupload:1.3.3',
		'org.apache.commons:commons-exec:1.3',
		'com.sun.mail:javax.mail:1.6.2',
		'com.google.guava:guava:30.0-jre',
		'org.jsoup:jsoup:1.9.2',
		'com.fasterxml.jackson.core:jackson-databind:2.12.4',
		'org.seleniumhq.selenium:selenium-support:3.8.1',
		'org.seleniumhq.selenium:selenium-firefox-driver:3.8.1',
		'org.seleniumhq.selenium:selenium-chrome-driver:3.8.1',
		'com.drewnoakes:metadata-extractor:2.16.0',
		// 'org.littleshoot:littleproxy:1.1.2',
		// 'org.quartz-scheduler:quartz:2.2.3',
		'org.flywaydb:flyway-core:5.0.5',
		'commons-beanutils:commons-beanutils:1.9.4'
		
	 // Connection pool for embedded Tomcat and programmatic datasource
	implementation 'org.vibur:vibur-dbcp:25.0'
	runtimeOnly 'com.googlecode.concurrentlinkedhashmap:concurrentlinkedhashmap-lru:1.4.2'
	
	// Needed to run in Tomcat
	// runtime 'commons-jxpath:commons-jxpath:1.3'

	testImplementation 'junit:junit:4.13.2',
		'org.springframework:spring-test:4.3.30.RELEASE'
	
	testRuntimeOnly 'commons-beanutils:commons-beanutils:1.9.4',
		'commons-jxpath:commons-jxpath:1.3'
		
}

task listJars {
	doLast {
		configurations.compile.each { File file -> println file.name }
	}
}

jar {
    manifest {
        attributes("Implementation-Title": "YadaWeb",
                   "Implementation-Version": archiveVersion)
    }
}

// Set the yada version in the properties file
processResources {
	doLast {
		ant.replace(file: "${sourceSets.main.output.resourcesDir}/net.yadaframework.yadaweb.properties", token: '@YADA_VERSION@', value: version)
	}
}

artifacts {
    archives javadocJar
}

configurations {
	hibtools {
		extendsFrom configurations.implementation
	}
}

dependencies {
	hibtools files("$buildDir/classes/java/main")
	hibtools files("$buildDir/classes/java/test") // Needed for yadaPersistenceUnit
	hibtools 'org.hibernate:hibernate-tools:5.2.10.Final'
}

task testDbSchema(dependsOn: [testClasses], type: net.yadaframework.tools.YadaCreateDbSchemaTask) {
	inputs.files configurations.hibtools
	outputfilename = "V1__yadatest.sql"
	doFirst {
		new File("$buildDir/classes/java/test/META-INF").mkdirs()
		copy {
			from "$buildDir/resources/test/META-INF/persistence.test.xml"
			into "$buildDir/classes/java/test/META-INF"
			rename 'persistence.test.xml', 'persistence.xml'
		} 
	}
	doLast { 
		delete "$buildDir/classes/java/test/META-INF/persistence.xml"
	}
}


