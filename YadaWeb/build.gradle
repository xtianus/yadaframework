buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		// Needed for test schema creation
		classpath 'net.yadaframework:yadatools:0.7.7.R4'
		// classpath 'kr.motd.gradle:sphinx-gradle-plugin:2.2.0'
	}                    
}

plugins {
	id 'java-library'
	id 'eclipse-wtp'
	id 'maven-publish'
}

group = 'net.yadaframework'
version = '0.7.6'

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
	// toolchain {
	// 	languageVersion = JavaLanguageVersion.of(8)
	// }
	// https://docs.gradle.org/6.0/userguide/java_plugin.html#sec:java-extension
	withSourcesJar()
    withJavadocJar() // https://stackoverflow.com/a/75710366/587641
}

if (!project.hasProperty('repoPath')) {
	ext.repoPath="repoPathMissing"
}

eclipse {
	jdt {
		// sourceCompatibility = 1.8
		// targetCompatibility = 1.8
		// https://stackoverflow.com/a/35302104/587641
		file {
      		File dir = file('.settings')
      		dir.mkdirs()
      		File f = file('.settings/org.eclipse.core.resources.prefs')
      		if (!f.exists()) {
      			f.write('eclipse.preferences.version=1\n')
      			f.append('encoding/<project>=utf-8')
      		}
    	}
	}
	classpath {
        downloadJavadoc = true
        downloadSources = true
    }
}

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

repositories {
    mavenCentral()
}

tasks.withType(JavaCompile).configureEach {
    // Needed since Spring 6.1: 
    // https://github.com/spring-projects/spring-framework/wiki/Upgrading-to-Spring-Framework-6.x#parameter-name-retention
    options.compilerArgs.add("-parameters")
}

dependencies {
	// Using "api" to keep things simple: no need to repeat the libraries in other projects for compilation

	api 'org.apache.commons:commons-configuration2:2.11.0'
	
	// Fixes commons-text:1.9 CVE-2022-42889 caused by commons-configuration2:2.8.0
	api 'org.apache.commons:commons-text:1.12.0'
	
	// For embedded Tomcat ONLY - add these to your project
    // runtimeOnly 'org.apache.tomcat:tomcat-el-api:8.5.+'
    // runtimeOnly 'org.apache.tomcat:tomcat-jasper-el:8.5.+'
    // runtimeOnly 'org.apache.tomcat:tomcat-jasper:8.5.+'
    // For embedded mariadb
	compileOnly('ch.vorburger.mariaDB4j:mariaDB4j:3.1.0') {
		// mariaDB4j pulls the latest version of spring core but this is never a good thing.
        exclude group: 'org.springframework', module: 'spring-core'
    }	
	// Needed by Commons Configuration
    api 'commons-jxpath:commons-jxpath:1.3'

	// For Spring: 	using a specific version instead of the + wildcard to prevent side effects 
	// 				in the application when new versions are made available 
    api 'org.springframework:spring-context-support:6.1.5',
		'org.springframework:spring-orm:6.1.5',
		'org.springframework:spring-webmvc:6.1.5',
		'org.springframework:spring-core:6.1.5',
		// 'org.springframework.social:spring-social-facebook:2.0.3.RELEASE',
		'org.hibernate.orm:hibernate-core:6.3.1.Final',
		'org.hibernate.validator:hibernate-validator:8.0.1.Final',
		'org.thymeleaf:thymeleaf-spring6:3.1.2.RELEASE',
		'com.mysql:mysql-connector-j:8.4.0',
		'commons-collections:commons-collections:3.2.2',
		'org.apache.commons:commons-exec:1.3',
		// 'jakarta.mail:jakarta.mail-api:2.1.2',
		'com.sun.mail:jakarta.mail:2.0.1', // The implementation is needed, not the api
		'com.google.guava:guava:31.1-jre',
		'org.jsoup:jsoup:1.18.3',
		'ch.qos.logback:logback-classic:1.5.12',
		'com.fasterxml.jackson.core:jackson-databind:2.18.2',
		'org.seleniumhq.selenium:selenium-java:4.13.0', // 4.13.0 is the last java 8 version
		'com.drewnoakes:metadata-extractor:2.19.0',
		'org.flywaydb:flyway-mysql:9.22.3', // 10 is compiled with jdk17
		'commons-beanutils:commons-beanutils:1.9.4'
		
	 // Connection pool for embedded Tomcat and programmatic datasource
	api 'org.vibur:vibur-dbcp:25.0'
	runtimeOnly 'com.googlecode.concurrentlinkedhashmap:concurrentlinkedhashmap-lru:1.4.2'
	implementation 'org.apache.tomcat:tomcat-servlet-api:10.1.14'
	compileOnly 'org.apache.tomcat.embed:tomcat-embed-core:10.1.14'
	compileOnly 'jakarta.servlet:jakarta.servlet-api:6.0.0'

	// Needed to run in Tomcat
	// runtime 'commons-jxpath:commons-jxpath:1.3'

	testImplementation 'junit:junit:4.13.2'
	
	// testRuntimeOnly 'commons-beanutils:commons-beanutils:1.9.+',
	// 	'commons-jxpath:commons-jxpath:1.3'
		
}

task listJars {
	doLast {
		configurations.compile.each { File file -> println file.name }
	}
}

jar {
    manifest {
        attributes("Implementation-Title": "YadaWeb",
                   "Implementation-Version": archiveVersion)
    }
}

// Set the yada version in the properties file
processResources {
	doLast {
		ant.replace(file: "${sourceSets.main.output.resourcesDir}/net.yadaframework.yadaweb.properties", token: '@YADA_VERSION@', value: version)
	}
}

javadoc {
    options.encoding = 'UTF-8'
    options.docEncoding = 'UTF-8'
    options.charSet = 'UTF-8'
    failOnError = false
}

// http://stackoverflow.com/a/27853822/587641
// task javadocJar(type: Jar) {
//     classifier = 'javadoc'
//     from javadoc
// }   
// 
// artifacts {
//     archives javadocJar
// }

configurations {
	hibtools {
		extendsFrom configurations.implementation
	}
}

dependencies {
	hibtools files("$buildDir/classes/java/main")
	hibtools files("$buildDir/classes/java/test") // Needed for yadaPersistenceUnit
	hibtools 'org.hibernate:hibernate-tools:5.6.15.Final'
}

task testDbSchema(dependsOn: [testClasses], type: net.yadaframework.tools.YadaCreateDbSchemaTask) {
	inputs.files configurations.hibtools
	outputfilename = "V1__yadatest.sql"
	doFirst {
		new File("$buildDir/classes/java/test/META-INF").mkdirs()
		copy {
			from "$buildDir/resources/test/META-INF/persistence.test.xml"
			into "$buildDir/classes/java/test/META-INF"
			rename 'persistence.test.xml', 'persistence.xml'
		} 
	}
	doLast { 
		delete "$buildDir/classes/java/test/META-INF/persistence.xml"
	}
}

publishing {
    publications {
        yadaWebLibrary(MavenPublication) {
        	artifactId = 'yadaweb'
            from components.java
            
			pom {
			    name = 'YadaWeb'
			    description = 'Some useful tasks for the Yada Framework'
			    url = 'https://yadaframework.net/en/index.html'
			    inceptionYear = '2014'
			    packaging = 'jar'
			    licenses {
			        license {
			            name = 'MIT License'
			            url = 'https://en.wikipedia.org/wiki/MIT_License'
			        }
			    }
			    developers {
			        developer {
			            id = 'xtianus'
			            name = 'Studio Ghezzi'
			            email = 'studio@ghezzi.net'
			        }
			    }
			    organization {
			    	name = 'Studio Ghezzi'
			    	url = 'https://studio.ghezzi.net/'
			    }
			    scm {
			        connection = 'scm:git:git@github.com:xtianus/yadaframework.git'
			        developerConnection = 'scm:git:git@github.com:xtianus/yadaframework.git'
			        url = 'https://github.com/xtianus/yadaframework'
			    }
			}
        }
    }
    repositories {
        maven {
        	name "PublicRepo"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials(PasswordCredentials) {
            	username = hasProperty('ossrhUsername')?ossrhUsername:''
            	password = hasProperty('ossrhPassword')?ossrhPassword:''
            }
        }
        // Creates task publishYadaWebLibraryPublicationToLocalRepoRepository
        maven {
        	name "LocalRepo"
        	// repoPath must be passed when invoking gradle using -P
        	url = "file://${repoPath}"
    	}
    }    
}

